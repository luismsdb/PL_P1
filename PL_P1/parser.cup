/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, COMMA, PLUS, MINUS, UMINUS, TIMES, DIV, LPAREN, RPAREN, EXP, LOG, SIN, COS, INF;
terminal Integer    NUMBER;        // our scanner provides numbers as integers

/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

/* The grammar rules */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            ;
            
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;        :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;        :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;        :}
             | MINUS expr:e                 {: RESULT = -e;           :}
             %prec UMINUS
             | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
             | NUMBER:n	                     {: RESULT = n;           :}

             | EXP LPAREN expr:e1 COMMA expr:e2 RPAREN     {: RESULT = Float.valueOf(String.valueOf(Math.pow(e1,e2)));       :}
             | LOG LPAREN expr:e RPAREN		{: RESULT = Float.valueOf(String.valueOf(Math.log(e)));   :}
             | COS LPAREN expr:e RPAREN     {: RESULT = Float.valueOf(String.valueOf(Math.cos(e)));   :}
             | SIN LPAREN expr:e RPAREN     {: RESULT = Float.valueOf(String.valueOf(Math.sin(e)));   :}
             
             | INF PLUS expr:e				{: RESULT = System.out.println("INF");   :}
             | INF MINUS expr:e				{: RESULT = System.out.println("INF");   :}
             
             | INF TIMES expr:e				{: RESULT = System.out.println("INF");   :}
             | INF DIV expr:e				{: RESULT = System.out.println("INF");   :}
             | expr:e DIV INF				{: RESULT = System.out.println("INF");   :}
             //| expr:e DIV expr:0			{: RESULT = Float.valueOf(0);   :}
             | INF DIV expr:e				{: RESULT = System.out.println("INF");   :}
             //| expr:0 DIV INF				{: RESULT = Float.valueOf(0);   :}
             
             | INF MINUS INF				{: RESULT = System.out.println("UNK");   :}
             | MINUS INF PLUS INF			{: RESULT = System.out.println("UNK");   :}
             //| expr:0 DIV expr:0			{: RESULT = System.out.println("UNK");   :}
             //| expr:0 TIMES INF				{: RESULT = System.out.println("UNK");   :}
             | INF DIV INF				{: RESULT = System.out.println("UNK");   :}
             ;
       